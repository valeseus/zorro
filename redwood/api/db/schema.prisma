datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = "native"
}

model NotaryFeedback {
  id                   Int    @id @default(autoincrement())
  unsubmittedProfileId Int
  feedback             String

  UnsubmittedProfile UnsubmittedProfile @relation(fields: [unsubmittedProfileId], references: [id])

  // We don't use this relation in this direction, but Prisma requires all relations to be listed bidirectionally.
  isUnaddressed UnsubmittedProfile[] @relation("unaddressedFeedback")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([unsubmittedProfileId])
}

model UnsubmittedProfile {
  id       Int    @id @default(autoincrement())
  photoCid String
  videoCid String

  userId Int  @unique
  User   User @relation(fields: [userId], references: [id])

  unaddressedFeedbackId Int?
  UnaddressedFeedback   NotaryFeedback? @relation("unaddressedFeedback", fields: [unaddressedFeedbackId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  NotaryFeedback NotaryFeedback[]
}

// Keep in sync with `StatusEnum` in `starknet/contracts/profile.cairo`
enum StatusEnum {
  NOT_CHALLENGED
  CHALLENGED
  ADJUDICATION_ROUND_COMPLETED
  APPEALED
  APPEAL_OPPORTUNITY_EXPIRED
  SUPER_ADJUDICATION_ROUND_COMPLETED
  SETTLED
}

// Cache of profiles populated from the `profiles` storage var in zorro.cairo
model CachedProfile {
  id Int @id

  // Fields stored on StarkNet:
  //  - cid : felt  # cidv1 for profile pic/video/etc
  //  - ethereum_address : felt
  //  - submitter_address : felt
  //  - submission_timestamp : felt
  //  - is_notarized : felt
  //  - last_recorded_status : felt  # one of StatusEnum
  //  - challenge_timestamp : felt  # nonzero iff there was a challenge
  //  - challenger_address : felt
  //  - challenge_evidence_cid : felt
  //  - owner_evidence_cid : felt
  //  - adjudication_timestamp : felt  # nonzero iff there was an adjudication
  //  - adjudicator_evidence_cid : felt
  //  - did_adjudicator_verify_profile : felt
  //  - appeal_timestamp : felt  # nonzero iff there was an appeal
  //  - super_adjudication_timestamp : felt  # nonzero iff there was a super adjudication
  //  - did_super_adjudicator_verify_profile : felt
  cache Json @db.JsonB

  // Derived fields
  cid      String?
  photoCid String?
  videoCid String?

  ethereumAddress      String?    @unique
  submissionTimestamp  DateTime
  notarized            Boolean
  lastRecordedStatus   StatusEnum
  challengeTimestamp   DateTime?
  challengerAddress    String?
  challengeEvidenceCid String?
  ownerEvidenceCid     String?

  adjudicationTimestamp       DateTime?
  adjudicatorEvidenceCid      String?
  didAdjudicatorVerifyProfile Boolean

  appealTimestamp                  DateTime?
  superAdjudicationTimestamp       DateTime?
  didSuperAdjudicatorVerifyProfile Boolean
  // End derived fields

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  connections Connection[]
  User        User?

  @@index([cid])
}

model Connection {
  id Int @id @default(autoincrement())

  profileId         Int
  purposeIdentifier String
  externalAddress   String
  signature         String // signature from profile owner

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cachedProfile CachedProfile @relation(fields: [profileId], references: [id])
  @@unique([profileId, purposeIdentifier])
}

// Track whether we've sent various types of notifications.
model Notification {
  id Int @id @default(autoincrement())

  key Json @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id              Int    @id @default(autoincrement())
  ethereumAddress String @unique

  profileId          Int?                 @unique
  UnsubmittedProfile UnsubmittedProfile[]

  email String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  CachedProfile CachedProfile? @relation(fields: [profileId], references: [id])
}
